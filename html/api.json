{
	"openapi": "3.0.0",
	"info": {
		"title": "Nadybot API",
		"description": "This API provides access to Nadybot functions in a REST API",
		"license": {
			"name": "GPL3",
			"url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
		},
		"version": "5.2.1"
	},
	"servers": [
		{
			"url": "/api"
		}
	],
	"components": {
		"schemas": {
			"ConfigModule": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the module"
					},
					"num_commands_enabled": {
						"type": "integer",
						"description": "How many commands are enabled"
					},
					"num_commands_disabled": {
						"type": "integer",
						"description": "How many commands are disabled"
					},
					"num_events_enabled": {
						"type": "integer",
						"description": "How many events are enabled"
					},
					"num_events_disabled": {
						"type": "integer",
						"description": "How many events are disabled"
					},
					"num_settings": {
						"type": "integer",
						"description": "How many settings are there?"
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "Description of the module or null if none"
					}
				}
			},
			"Operation": {
				"type": "object",
				"properties": {
					"op": {
						"type": "string",
						"description": "The operation to perform"
					}
				}
			},
			"ModuleSubcommandChannel": {
				"type": "object",
				"properties": {
					"access_level": {
						"type": "string",
						"description": "The access level you need to have in order to be allowed to use this command in this channel"
					},
					"enabled": {
						"type": "boolean",
						"description": "Can this command be used in this channel?"
					}
				}
			},
			"ModuleSubcommand": {
				"type": "object",
				"properties": {
					"command": {
						"type": "string",
						"description": "The string or regexp that has to match this command"
					},
					"type": {
						"type": "string",
						"description": "Either \"cmd\" or \"subcmd\""
					},
					"description": {
						"type": "string",
						"description": "A short description of the command"
					},
					"msg": {
						"$ref": "#/components/schemas/ModuleSubcommandChannel",
						"nullable": true,
						"description": "Settings for tells"
					},
					"priv": {
						"$ref": "#/components/schemas/ModuleSubcommandChannel",
						"nullable": true,
						"description": "Settings for private channel"
					},
					"org": {
						"$ref": "#/components/schemas/ModuleSubcommandChannel",
						"nullable": true,
						"description": "Settings for org channel"
					}
				}
			},
			"ModuleCommand": {
				"allOf": [
					{
						"$ref": "#/components/schemas/ModuleSubcommand"
					},
					{
						"type": "object",
						"properties": {
							"subcommands": {
								"type": "array",
								"description": "A list of subcommands for this command. Subcommands can have different rights, but cannot be enabled without the command itself being enabled. *",
								"items": {
									"$ref": "#/components/schemas/ModuleSubcommand"
								}
							}
						}
					}
				]
			},
			"SettingOption": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of this option for displaying"
					},
					"value": {
						"oneOf": [
							{
								"type": "integer"
							},
							{
								"type": "string"
							}
						],
						"nullable": true,
						"description": "Which value does this option represent?"
					}
				}
			},
			"ModuleSetting": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"description": "The type of this setting (bool, number, options, etc)"
					},
					"name": {
						"type": "string",
						"description": "The name of the setting"
					},
					"value": {
						"oneOf": [
							{
								"type": "integer"
							},
							{
								"type": "string"
							},
							{
								"type": "boolean"
							}
						],
						"nullable": true,
						"description": "The current value"
					},
					"options": {
						"type": "array",
						"description": "A list of predefined options to pick from",
						"items": {
							"$ref": "#/components/schemas/SettingOption"
						}
					},
					"editable": {
						"type": "boolean",
						"description": "Is this a fixed setting (like database version) or can it be changed?"
					},
					"description": {
						"type": "string",
						"description": "A description of what this setting is for"
					},
					"help": {
						"type": "string",
						"nullable": true
					}
				}
			},
			"ModuleEventConfig": {
				"type": "object",
				"properties": {
					"event": {
						"type": "string",
						"description": "The event for this module"
					},
					"handler": {
						"type": "string",
						"description": "The function handling this event"
					},
					"description": {
						"type": "string",
						"description": "What is supposed to happed when this event occurs?"
					},
					"enabled": {
						"type": "boolean",
						"description": "Is the event handler turned on?"
					}
				}
			},
			"ModuleAccessLevel": {
				"allOf": [
					{
						"$ref": "#/components/schemas/SettingOption"
					},
					{
						"type": "object",
						"properties": {
							"numeric_value": {
								"type": "integer",
								"description": "Higher value means fewer rights. Use this to sort on"
							},
							"enabled": {
								"type": "boolean",
								"description": "Some ranks only work if a module is enabled"
							}
						}
					}
				]
			},
			"RouteHopColor": {
				"type": "object",
				"properties": {
					"hop": {
						"type": "string",
						"description": "The hop mask (discord, *, aopriv, ...)"
					},
					"where": {
						"type": "string",
						"nullable": true,
						"description": "The channel for which to apply these colors or null for all"
					},
					"tag_color": {
						"type": "string",
						"nullable": true,
						"description": "The 6 hex digits of the tag color, like FFFFFF"
					},
					"text_color": {
						"type": "string",
						"nullable": true,
						"description": "The 6 hex digits of the text color, like FFFFFF"
					}
				}
			},
			"RouteHopFormat": {
				"type": "object",
				"properties": {
					"hop": {
						"type": "string",
						"description": "The hop mask (discord, *, aopriv, ...)"
					},
					"where": {
						"type": "string",
						"nullable": true,
						"description": "The channel for which to apply these, or null for all"
					},
					"render": {
						"type": "boolean",
						"description": "Whether to render this tag or not"
					},
					"format": {
						"type": "string",
						"description": "The format what the text of the tag should look like"
					}
				}
			},
			"Audit": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "ID of this audit entry"
					},
					"actor": {
						"type": "string",
						"description": "The person doing something"
					},
					"actee": {
						"type": "string",
						"nullable": true,
						"description": "The person the actor is interacting with. Not set if not applicable"
					},
					"action": {
						"type": "string",
						"description": "What did the actor do"
					},
					"value": {
						"type": "string",
						"nullable": true,
						"description": "Optional value for the action"
					},
					"time": {
						"type": "integer",
						"description": "time when it happened"
					}
				}
			},
			"BasicSystemInformation": {
				"type": "object",
				"properties": {
					"bot_name": {
						"type": "string",
						"description": "Name of the bot character in AO"
					},
					"superadmin": {
						"type": "string",
						"nullable": true,
						"description": "Name of the character running the bot, null if not set"
					},
					"org": {
						"type": "string",
						"nullable": true,
						"description": "Name of the org this bot is in or null if not in an org"
					},
					"org_id": {
						"type": "integer",
						"nullable": true,
						"description": "ID of the org this bot is in or null if not in an org"
					},
					"bot_version": {
						"type": "string",
						"description": "Which Nadybot version are we running?"
					},
					"php_version": {
						"type": "string",
						"description": "Which PHP version are we running?"
					},
					"os": {
						"type": "string",
						"description": "Which operating system/kernel are we running?"
					},
					"db_type": {
						"type": "string",
						"description": "Which database type (mysql/sqlite) are we using?"
					}
				}
			},
			"MemoryInformation": {
				"type": "object",
				"properties": {
					"current_usage": {
						"type": "integer",
						"description": "Current memory usage in bytes"
					},
					"current_usage_real": {
						"type": "integer",
						"description": "Current memory usage in bytes including allocated system pages"
					},
					"peak_usage": {
						"type": "integer",
						"description": "Peak memory usage in bytes"
					},
					"peak_usage_real": {
						"type": "integer",
						"description": "Peak memory usage in bytes including allocated system pages"
					}
				}
			},
			"ProxyReply": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"description": "Type of the reply from the proxy"
					}
				}
			},
			"ProxyCapabilities": {
				"allOf": [
					{
						"$ref": "#/components/schemas/ProxyReply"
					},
					{
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"nullable": true,
								"description": "Name of the proxy software"
							},
							"version": {
								"type": "string",
								"nullable": true,
								"description": "Version of the proxy software"
							},
							"send-modes": {
								"type": "array",
								"description": "Modes the proxy supports for sending messages",
								"items": {
									"type": "string"
								}
							},
							"buddy-modes": {
								"type": "array",
								"description": "Modes the proxy supports for adding buddies",
								"items": {
									"type": "string"
								}
							},
							"supported-cmds": {
								"type": "array",
								"description": "Commands the proxy supports in general",
								"items": {
									"type": "string"
								}
							},
							"rate-limited": {
								"type": "boolean",
								"description": "Set when the proxy enforces rate-limits"
							},
							"default-mode": {
								"type": "string",
								"nullable": true,
								"description": "The mode the proxy will use when sending proxy-default"
							},
							"started-at": {
								"type": "integer",
								"nullable": true,
								"description": "Unix timestamp when the proxy was started"
							},
							"workers": {
								"type": "array",
								"description": "Names of the workers",
								"items": {
									"type": "string"
								}
							}
						}
					}
				]
			},
			"MiscSystemInformation": {
				"type": "object",
				"properties": {
					"using_chat_proxy": {
						"type": "boolean",
						"description": "Is the bot using a chat proxy for mass messages or more than 1000 friends"
					},
					"proxy_capabilities": {
						"$ref": "#/components/schemas/ProxyCapabilities",
						"description": "If the proxy is used, this describes in detail what the proxy supports"
					},
					"uptime": {
						"type": "integer",
						"description": "Number of seconds since the bot was started"
					}
				}
			},
			"ConfigStatistics": {
				"type": "object",
				"properties": {
					"active_tell_commands": {
						"type": "integer",
						"description": "Number of commands activated for use with /tell"
					},
					"active_priv_commands": {
						"type": "integer",
						"description": "Number of commands activated for use in the private channel"
					},
					"active_org_commands": {
						"type": "integer",
						"description": "Number of commands activated for use in the org channel"
					},
					"active_subcommands": {
						"type": "integer",
						"description": "Number of subcommands activated"
					},
					"active_aliases": {
						"type": "integer",
						"description": "Number of aliases"
					},
					"active_events": {
						"type": "integer",
						"description": "Number of currently active events"
					},
					"active_help_commands": {
						"type": "integer",
						"description": "Number of active help texts for commands"
					}
				}
			},
			"SystemStats": {
				"type": "object",
				"properties": {
					"buddy_list_size": {
						"type": "integer",
						"description": "How many characters are currently on the friendlist"
					},
					"max_buddy_list_size": {
						"type": "integer",
						"description": "Maximum allowed characters for the friendlist"
					},
					"priv_channel_size": {
						"type": "integer",
						"description": "How many people are currently on the bot's private channel"
					},
					"org_size": {
						"type": "integer",
						"description": "How many people are in the bot's org? 0 if not in an org"
					},
					"charinfo_cache_size": {
						"type": "integer",
						"description": "How many character infos are currently cached?"
					},
					"chatqueue_length": {
						"type": "integer",
						"description": "How many messages are waiting to be sent?"
					}
				}
			},
			"ChannelInfo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the public channel"
					},
					"id": {
						"type": "integer",
						"description": "The ID the game uses for this channel"
					}
				}
			},
			"SystemInformation": {
				"type": "object",
				"properties": {
					"basic": {
						"$ref": "#/components/schemas/BasicSystemInformation",
						"description": "Basic information like OS"
					},
					"memory": {
						"$ref": "#/components/schemas/MemoryInformation",
						"description": "Memory statistics"
					},
					"misc": {
						"$ref": "#/components/schemas/MiscSystemInformation",
						"description": "Information not fitting any other category"
					},
					"config": {
						"$ref": "#/components/schemas/ConfigStatistics",
						"description": "Statistics about some configurations"
					},
					"stats": {
						"$ref": "#/components/schemas/SystemStats",
						"description": "General bot statistics"
					},
					"channels": {
						"type": "array",
						"description": "Which channels is the bot listening to",
						"items": {
							"$ref": "#/components/schemas/ChannelInfo"
						}
					}
				}
			},
			"OrgHistory": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Internal ID of this history entry"
					},
					"actor": {
						"type": "string",
						"nullable": true,
						"description": "The person doing the action"
					},
					"actee": {
						"type": "string",
						"nullable": true,
						"description": "Optional, the person the actor is acting on"
					},
					"action": {
						"type": "string",
						"nullable": true,
						"description": "The action the actor is doing"
					},
					"organization": {
						"type": "string",
						"nullable": true,
						"description": "Name of the organization this action was done in"
					},
					"time": {
						"type": "integer",
						"nullable": true,
						"description": "Timestamp when the action happened"
					}
				}
			},
			"NewNews": {
				"type": "object",
				"properties": {
					"time": {
						"type": "integer",
						"description": "Unix timestamp when this was created"
					},
					"name": {
						"type": "string",
						"description": "Name of the character who created the entry"
					},
					"news": {
						"type": "string",
						"description": "Text of these news"
					},
					"sticky": {
						"type": "boolean",
						"description": "Set to true if this is pinned above all unpinned news"
					},
					"deleted": {
						"type": "boolean",
						"description": "Set to true if this is actually deleted"
					}
				}
			},
			"News": {
				"allOf": [
					{
						"$ref": "#/components/schemas/NewNews"
					},
					{
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"description": "The internal ID of this news entry"
							}
						}
					}
				]
			},
			"Player": {
				"type": "object",
				"properties": {
					"charid": {
						"type": "integer",
						"description": "The character ID as used by Anarchy Online"
					},
					"first_name": {
						"type": "string",
						"description": "The character's first name (the name before $name)"
					},
					"name": {
						"type": "string",
						"description": "The character's name as it appears in the game"
					},
					"last_name": {
						"type": "string",
						"description": "The character's last name (the name after $name)"
					},
					"level": {
						"type": "integer",
						"nullable": true,
						"description": "What level (1-220) is the character or null if unknown"
					},
					"breed": {
						"type": "string",
						"description": "Any of Nano, Solitus, Atrox or Opifex. Also empty string if unknown"
					},
					"gender": {
						"type": "string",
						"description": "Male, Female, Neuter or an empty string if unknown"
					},
					"faction": {
						"type": "string",
						"description": "Omni, Clan, Neutral or an empty string if unknown"
					},
					"profession": {
						"type": "string",
						"nullable": true,
						"description": "The long profession name (e.g. \"Enforcer\", not \"enf\" or \"enfo\") or an empty string if unknown"
					},
					"prof_title": {
						"type": "string",
						"description": "The title-level title for the profession of this player For example \"The man\", \"Don\" or empty if unknown."
					},
					"ai_rank": {
						"type": "string",
						"description": "The name of the ai_level as a rank or empty string if unknown"
					},
					"ai_level": {
						"type": "integer",
						"nullable": true,
						"description": "AI level of this player or null if unknown"
					},
					"org_id": {
						"type": "integer",
						"nullable": true,
						"description": "The id of the org this player is in or null if none or unknown"
					},
					"org": {
						"type": "string",
						"nullable": true,
						"description": "The name of the org this player is in or null if none/unknown"
					},
					"org_rank": {
						"type": "string",
						"nullable": true,
						"description": "The name of the rank the player has in their org (Veteran, Apprentice) or null if not in an org or unknown"
					},
					"org_rank_id": {
						"type": "integer",
						"nullable": true,
						"description": "The numeric rank of the player in their org or null if not in an org/unknown"
					},
					"dimension": {
						"type": "integer",
						"nullable": true,
						"description": "In which dimension (RK server) is this character? 4 for test, 5 for RK5, 6 for RK19"
					},
					"head_id": {
						"type": "integer",
						"nullable": true,
						"description": "Which head is the player using"
					},
					"pvp_rating": {
						"type": "integer",
						"nullable": true,
						"description": "Numeric PvP-rating of the player (1-7) or null if unknown"
					},
					"pvp_title": {
						"type": "string",
						"nullable": true,
						"description": "Name of the player's PvP title derived from their $pvp_rating or null if unknown"
					},
					"last_update": {
						"type": "integer",
						"nullable": true,
						"description": "Unix timestamp of the last update of these data"
					}
				},
				"description": "This represents the data the bot stores about a player in the cache and database"
			},
			"OnlinePlayer": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Player"
					},
					{
						"type": "object",
						"properties": {
							"afk_message": {
								"type": "string",
								"description": "The AFK message of the player or an empty string"
							},
							"main_character": {
								"type": "string",
								"description": "The name of the main character, or the same as $name if this is the main character of the player"
							},
							"online": {
								"type": "boolean",
								"description": "True if this player is currently online, false otherwise"
							}
						},
						"description": "This represents a single player in the online list"
					}
				]
			},
			"OnlinePlayers": {
				"type": "object",
				"properties": {
					"org": {
						"type": "array",
						"description": "All players online in the org",
						"items": {
							"$ref": "#/components/schemas/OnlinePlayer"
						}
					},
					"private_channel": {
						"type": "array",
						"description": "All players online in the private channel",
						"items": {
							"$ref": "#/components/schemas/OnlinePlayer"
						}
					}
				},
				"description": "This is the list of all players considered to be online by the bot"
			},
			"FunctionParameter": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"required": {
						"type": "boolean"
					}
				}
			},
			"ClassSpec": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"class": {
						"type": "string"
					},
					"params": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FunctionParameter"
						}
					},
					"description": {
						"type": "string",
						"nullable": true
					}
				}
			},
			"RelayLayerArgument": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the argument"
					},
					"value": {
						"type": "string",
						"description": "The value of the argument"
					}
				}
			},
			"RelayLayer": {
				"type": "object",
				"properties": {
					"layer": {
						"type": "string",
						"description": "Which relay stack layer does this represent?"
					},
					"arguments": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RelayLayerArgument"
						}
					}
				}
			},
			"RelayConfig": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of this relay"
					},
					"layers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RelayLayer"
						}
					}
				}
			},
			"RelayStatus": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"text": {
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {
			"basicAuth": {
				"type": "http",
				"scheme": "basic"
			}
		}
	},
	"paths": {
		"/module": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of available modules to configure",
				"responses": {
					"200": {
						"description": "A list of modules to configure",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ConfigModule"
									}
								}
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/events/{event}/{handler}": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "event",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "handler",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate an event",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					},
					"404": {
						"description": "Module or Event not found"
					}
				},
				"requestBody": {
					"description": "Either \"enable\" or \"disable\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate an event",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					},
					"404": {
						"description": "Module or Event not found"
					}
				},
				"requestBody": {
					"description": "Either \"enable\" or \"disable\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/settings/{setting}": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "setting",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Change a setting's value",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"404": {
						"description": "Wrong module or setting"
					},
					"422": {
						"description": "Invalid value given"
					}
				},
				"requestBody": {
					"description": "New value for the setting",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "boolean"
									},
									{
										"type": "integer"
									}
								]
							}
						}
					}
				},
				"tags": [
					"config"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Change a setting's value",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"404": {
						"description": "Wrong module or setting"
					},
					"422": {
						"description": "Invalid value given"
					}
				},
				"requestBody": {
					"description": "New value for the setting",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "boolean"
									},
									{
										"type": "integer"
									}
								]
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/commands/{command}/{channel}": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "command",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "channel",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate a Command",
				"responses": {
					"200": {
						"description": "operation applied successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ModuleCommand"
								}
							}
						}
					},
					"422": {
						"description": "Wrong or no operation given"
					}
				},
				"requestBody": {
					"description": "Parameters to change",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ModuleSubcommandChannel"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate a Command",
				"responses": {
					"200": {
						"description": "operation applied successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ModuleCommand"
								}
							}
						}
					},
					"422": {
						"description": "Wrong or no operation given"
					}
				},
				"requestBody": {
					"description": "Parameters to change",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ModuleSubcommandChannel"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/commands/{command}": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "command",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate a command",
				"responses": {
					"200": {
						"description": "operation applied successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					}
				},
				"requestBody": {
					"description": "Either \"enable\" or \"disable\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate a command",
				"responses": {
					"200": {
						"description": "operation applied successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					}
				},
				"requestBody": {
					"description": "Either \"enable\" or \"disable\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "channel",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Either \"msg\", \"priv\", \"guild\" or \"all\""
				}
			],
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate a module",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					}
				},
				"requestBody": {
					"description": "Either \"enable\" or \"disable\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Activate or deactivate a module",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					}
				},
				"requestBody": {
					"description": "Either \"enable\" or \"disable\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/description": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get the description of a module",
				"responses": {
					"200": {
						"description": "A description of the module",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"204": {
						"description": "No description set"
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/settings": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of available settings for a module",
				"responses": {
					"200": {
						"description": "A list of all settings for this module",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ModuleSetting"
									}
								}
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/events": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of available events for a module",
				"responses": {
					"200": {
						"description": "A list of all events and their status for this module",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ModuleEventConfig"
									}
								}
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/module/{module}/commands": {
			"parameters": [
				{
					"name": "module",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of available commands for a module",
				"responses": {
					"200": {
						"description": "A list of all command and possible subcommands this module provides",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ModuleCommand"
									}
								}
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/access_levels": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of available events for a module",
				"responses": {
					"200": {
						"description": "A list of all access levels",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ModuleAccessLevel"
									}
								}
							}
						}
					}
				},
				"tags": [
					"config"
				]
			}
		},
		"/hop/color": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "List all hop colors",
				"responses": {
					"200": {
						"description": "The hop color definitions",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RouteHopColor"
									}
								}
							}
						}
					}
				},
				"tags": [
					"messages"
				]
			}
		},
		"/hop/format": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "List all hop formats",
				"responses": {
					"200": {
						"description": "The hop format definitions",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RouteHopFormat"
									}
								}
							}
						}
					}
				},
				"tags": [
					"messages"
				]
			}
		},
		"/setting/{key}": {
			"parameters": [
				{
					"name": "key",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get the value of a setting",
				"responses": {
					"200": {
						"description": "The stored value",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"204": {
						"description": "No value stored"
					}
				},
				"tags": [
					"preferences"
				]
			},
			"post": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Create a new setting",
				"responses": {
					"201": {
						"description": "The new setting was stored successfully"
					},
					"409": {
						"description": "There is already a setting stored"
					},
					"415": {
						"description": "You tried to pass more than just a simple string"
					}
				},
				"requestBody": {
					"description": "The data you want to store",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"tags": [
					"preferences"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Store a setting",
				"responses": {
					"204": {
						"description": "The new setting was stored successfully"
					},
					"415": {
						"description": "You tried to pass more than just a simple string"
					}
				},
				"requestBody": {
					"description": "The data you want to store",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"tags": [
					"preferences"
				]
			},
			"delete": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Delete a setting",
				"responses": {
					"204": {
						"description": "The new setting was deleted successfully"
					},
					"409": {
						"description": "No setting found for that key"
					}
				},
				"tags": [
					"preferences"
				]
			}
		},
		"/profile": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of saved profiles",
				"responses": {
					"200": {
						"description": "A list of saved profiled",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"tags": [
					"profile"
				]
			}
		},
		"/profile/{profile}": {
			"parameters": [
				{
					"name": "profile",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "View a profile",
				"responses": {
					"200": {
						"description": "Profile found and shown",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "Profile not found"
					}
				},
				"tags": [
					"profile"
				]
			},
			"delete": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Delete a profile",
				"responses": {
					"204": {
						"description": "Profile successfully deleted"
					},
					"404": {
						"description": "Profile not found"
					}
				},
				"tags": [
					"profile"
				]
			},
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Load a profile",
				"responses": {
					"204": {
						"description": "Profile load successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					},
					"404": {
						"description": "Profile not found"
					}
				},
				"requestBody": {
					"description": "Must be \"load\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"profile"
				]
			},
			"put": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Load a profile",
				"responses": {
					"204": {
						"description": "Profile load successfully"
					},
					"402": {
						"description": "Wrong or no operation given"
					},
					"404": {
						"description": "Profile not found"
					}
				},
				"requestBody": {
					"description": "Must be \"load\"",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Operation"
							}
						}
					}
				},
				"tags": [
					"profile"
				]
			},
			"post": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Load a profile",
				"responses": {
					"204": {
						"description": "Profile saved successfully"
					},
					"409": {
						"description": "Profile already exists"
					}
				},
				"tags": [
					"profile"
				]
			}
		},
		"/audit": {
			"parameters": [
				{
					"name": "limit",
					"required": false,
					"in": "query",
					"schema": {
						"type": "integer"
					},
					"description": "No more than this amount of entries will be returned. Default is 50"
				},
				{
					"name": "actor",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Show only entries of this actor"
				},
				{
					"name": "actee",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Show only entries with this actee"
				},
				{
					"name": "action",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Show only entries with this action"
				},
				{
					"name": "before",
					"required": false,
					"in": "query",
					"schema": {
						"type": "integer"
					},
					"description": "Show only entries from before the given timestamp"
				},
				{
					"name": "after",
					"required": false,
					"in": "query",
					"schema": {
						"type": "integer"
					},
					"description": "Show only entries from after the given timestamp"
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Query entries from the audit log",
				"responses": {
					"200": {
						"description": "The audit log entries",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Audit"
									}
								}
							}
						}
					}
				},
				"tags": [
					"security",
					"audit"
				]
			}
		},
		"/sysinfo": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get system information",
				"responses": {
					"200": {
						"description": "Some basic system information",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SystemInformation"
								}
							}
						}
					}
				},
				"tags": [
					"system"
				]
			}
		},
		"/org/history": {
			"parameters": [
				{
					"name": "limit",
					"required": false,
					"in": "query",
					"schema": {
						"type": "integer"
					},
					"description": "No more than this amount of entries will be returned. Default is 50"
				},
				{
					"name": "actor",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Show only entries of this actor"
				},
				{
					"name": "actee",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Show only entries with this actee"
				},
				{
					"name": "action",
					"required": false,
					"in": "query",
					"schema": {
						"type": "string"
					},
					"description": "Show only entries with this action"
				},
				{
					"name": "before",
					"required": false,
					"in": "query",
					"schema": {
						"type": "integer"
					},
					"description": "Show only entries from before the given timestamp"
				},
				{
					"name": "after",
					"required": false,
					"in": "query",
					"schema": {
						"type": "integer"
					},
					"description": "Show only entries from after the given timestamp"
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Query entries from the org history log",
				"responses": {
					"200": {
						"description": "The org history log entries",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/OrgHistory"
									}
								}
							}
						}
					}
				},
				"tags": [
					"guild",
					"audit"
				]
			}
		},
		"/news": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of all news",
				"responses": {
					"200": {
						"description": "A list of news items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/News"
									}
								}
							}
						}
					}
				},
				"tags": [
					"news"
				]
			},
			"post": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Create a new news item",
				"responses": {
					"204": {
						"description": "The news item was created successfully"
					}
				},
				"requestBody": {
					"description": "The item to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewNews"
							}
						}
					}
				},
				"tags": [
					"news"
				]
			}
		},
		"/news/{id}": {
			"parameters": [
				{
					"name": "id",
					"required": true,
					"in": "path",
					"schema": {
						"type": "integer"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a single news item by id",
				"responses": {
					"200": {
						"description": "The requested news item",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/News"
								}
							}
						}
					},
					"404": {
						"description": "Given news id not found"
					}
				},
				"tags": [
					"news"
				]
			},
			"patch": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Modify an existing news item",
				"responses": {
					"200": {
						"description": "The news item it is now",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/News"
								}
							}
						}
					}
				},
				"requestBody": {
					"description": "The new data for the item",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewNews"
							}
						}
					}
				},
				"tags": [
					"news"
				]
			}
		},
		"/online": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a list of all people online in all linked channels",
				"responses": {
					"200": {
						"description": "A list of online players",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OnlinePlayers"
								}
							}
						}
					}
				},
				"tags": [
					"online"
				]
			}
		},
		"/relay-component/transport": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "List all relay transports",
				"responses": {
					"200": {
						"description": "The available relay transport layers",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ClassSpec"
									}
								}
							}
						}
					}
				},
				"tags": [
					"relay"
				]
			}
		},
		"/relay-component/layer": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "List all relay layers",
				"responses": {
					"200": {
						"description": "The available generic relay layers",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ClassSpec"
									}
								}
							}
						}
					}
				},
				"tags": [
					"relay"
				]
			}
		},
		"/relay-component/protocol": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "List all relay protocols",
				"responses": {
					"200": {
						"description": "The available relay protocols",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ClassSpec"
									}
								}
							}
						}
					}
				},
				"tags": [
					"relay"
				]
			}
		},
		"/relay": {
			"parameters": [],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "List all relays",
				"responses": {
					"200": {
						"description": "The configured relays",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RelayConfig"
									}
								}
							}
						}
					}
				},
				"tags": [
					"relay"
				]
			},
			"post": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Create a new relay",
				"responses": {
					"204": {
						"description": "Relay created successfully"
					}
				},
				"tags": [
					"relay"
				]
			}
		},
		"/relay/{relay}": {
			"parameters": [
				{
					"name": "relay",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a single relay",
				"responses": {
					"200": {
						"description": "The configured relay",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RelayConfig"
								}
							}
						}
					},
					"404": {
						"description": "Relay not found"
					}
				},
				"tags": [
					"relay"
				]
			},
			"delete": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Delete a relay",
				"responses": {
					"204": {
						"description": "The relay was deleted"
					},
					"404": {
						"description": "Relay not found"
					}
				},
				"tags": [
					"relay"
				]
			}
		},
		"/relay/{relay}/status": {
			"parameters": [
				{
					"name": "relay",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"get": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Get a relay's status",
				"responses": {
					"200": {
						"description": "The status message of the relay",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RelayStatus"
								}
							}
						}
					},
					"404": {
						"description": "Relay not found"
					}
				},
				"tags": [
					"relay"
				]
			}
		},
		"/execute/{uuid}": {
			"parameters": [
				{
					"name": "uuid",
					"required": true,
					"in": "path",
					"schema": {
						"type": "string"
					}
				}
			],
			"post": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Execute a command, result is sent via websocket",
				"responses": {
					"204": {
						"description": "operation applied successfully"
					},
					"404": {
						"description": "Invalid UUID provided"
					},
					"422": {
						"description": "Unparseable data received"
					}
				},
				"requestBody": {
					"description": "The command to execute as typed in",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"tags": [
					"webserver"
				]
			}
		},
		"/chat/web": {
			"parameters": [],
			"post": {
				"security": [
					{
						"basicAuth": []
					}
				],
				"description": "Send a message to the org chat",
				"responses": {
					"204": {
						"description": "Message sent"
					}
				},
				"requestBody": {
					"description": "The text to send",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"tags": [
					"webserver"
				]
			}
		}
	}
}